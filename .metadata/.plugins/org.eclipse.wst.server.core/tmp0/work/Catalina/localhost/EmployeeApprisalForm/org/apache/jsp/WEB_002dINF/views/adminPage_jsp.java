/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.87
 * Generated at: 2023-06-21 11:06:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;

public final class adminPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1686907102789L));
    _jspx_dependants.put("jar:file:/D:/Documents/struts/EmployeeApprisalApp/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/EmployeeApprisalForm/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153365282000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\" />\r\n");
      out.write("  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("  <title>Admin Page</title>\r\n");
      out.write("  <style>\r\n");
      out.write("    .modal {\r\n");
      out.write("      display: none;\r\n");
      out.write("      position: fixed;\r\n");
      out.write("      z-index: 1;\r\n");
      out.write("      left: 0;\r\n");
      out.write("      top: 0;\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      height: 100%;\r\n");
      out.write("      overflow: auto;\r\n");
      out.write("      background-color: rgba(0, 0, 0, 0.4);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .modal-content {\r\n");
      out.write("      background-color: #fefefe;\r\n");
      out.write("      margin: 15% auto;\r\n");
      out.write("      padding: 20px;\r\n");
      out.write("      border: 1px solid #888;\r\n");
      out.write("      width: 500px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .close {\r\n");
      out.write("      color: #aaa;\r\n");
      out.write("      float: right;\r\n");
      out.write("      font-size: 28px;\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .close:hover,\r\n");
      out.write("    .close:focus {\r\n");
      out.write("      color: black;\r\n");
      out.write("      text-decoration: none;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    #employeeForm {\r\n");
      out.write("      display: flex;\r\n");
      out.write("      flex-direction: column;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    #employeeForm label {\r\n");
      out.write("      margin-top: 10px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    #employeeForm input[type=\"submit\"] {\r\n");
      out.write("      margin-top: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .modalpart{\r\n");
      out.write("      padding: 10px;\r\n");
      out.write("      border: 2px solid red;\r\n");
      out.write("      margin-bottom: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    /*the container must be positioned relative:*/\r\n");
      out.write(".autocomplete {\r\n");
      out.write("  position: relative;\r\n");
      out.write("  display: inline-block;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".autocomplete input {\r\n");
      out.write("  border: 1px solid black;\r\n");
      out.write("  background-color: #f1f1f1;\r\n");
      out.write("  padding: 5px;\r\n");
      out.write("  font-size: 16px;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".autocomplete input[type=text] {\r\n");
      out.write("  background-color: #f1f1f1;\r\n");
      out.write("  width: 80%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".autocomplete input[type=submit] {\r\n");
      out.write("  background-color: DodgerBlue;\r\n");
      out.write("  color: #fff;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".autocomplete-items {\r\n");
      out.write("  position: absolute;\r\n");
      out.write("  border: 1px solid #d4d4d4;\r\n");
      out.write("  border-bottom: none;\r\n");
      out.write("  border-top: none;\r\n");
      out.write("  z-index: 99;\r\n");
      out.write("  /*position the autocomplete items to be the same width as the container:*/\r\n");
      out.write("  top: 100%;\r\n");
      out.write("  left: 0;\r\n");
      out.write("  right: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".autocomplete-items div {\r\n");
      out.write("  padding: 10px;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("  background-color: #fff; \r\n");
      out.write("  border-bottom: 1px solid #d4d4d4; \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/*when hovering an item:*/\r\n");
      out.write(".autocomplete-items div:hover {\r\n");
      out.write("  background-color: #e9e9e9; \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/*when navigating through the items using the arrow keys:*/\r\n");
      out.write(".autocomplete-active {\r\n");
      out.write("  background-color: DodgerBlue !important; \r\n");
      out.write("  color: #ffffff; \r\n");
      out.write("}\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");

ArrayList<String> arrayList = (ArrayList<String>) request.getAttribute("allId");
// Convert ArrayList to array
String[] jspArray = arrayList.toArray(new String[arrayList.size()]);


      out.write("\r\n");
      out.write("  <div>\r\n");
      out.write("    <label for=\"empid\">Employee ID:</label>\r\n");
      out.write("     <div class=\"autocomplete\" style=\"width:300px;\">\r\n");
      out.write("    <input type=\"text\" id=\"empid\" name=\"empid\" />\r\n");
      out.write("     </div>\r\n");
      out.write("    <button onclick='fetchData()'> Get Data</button>\r\n");
      out.write("  </div>  \r\n");
      out.write("    <br />\r\n");
      out.write(" 	\r\n");
      out.write(" 	<div id=\"nextContent\"></div>\r\n");
      out.write("   <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("	    function fetchData() {\r\n");
      out.write("	    		var isr={\"eid\":document.getElementById(\"empid\").value}\r\n");
      out.write("	    		\r\n");
      out.write("	    	  $.ajax({\r\n");
      out.write("	    	    url: 'getDetails.do',\r\n");
      out.write("	    	    type: 'POST',\r\n");
      out.write("	    	    dataType: 'html',\r\n");
      out.write("	    	    data: isr,\r\n");
      out.write("	    	    success: function(response) {\r\n");
      out.write("	    	    	 $('#nextContent').html(response);\r\n");
      out.write("	    	    },\r\n");
      out.write("	    	    error: function(xhr, status, error) {\r\n");
      out.write("	    	      // Handle the error\r\n");
      out.write("	    	    }\r\n");
      out.write("	    	  });\r\n");
      out.write("	    	}\r\n");
      out.write("	    \r\n");
      out.write("	    \r\n");
      out.write("		\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function autocomplete(inp, arr) {\r\n");
      out.write("	  /*the autocomplete function takes two arguments,\r\n");
      out.write("	  the text field element and an array of possible autocompleted values:*/\r\n");
      out.write("	  var currentFocus;\r\n");
      out.write("	  /*execute a function when someone writes in the text field:*/\r\n");
      out.write("	  inp.addEventListener(\"input\", function(e) {\r\n");
      out.write("	      var a, b, i, val = this.value;\r\n");
      out.write("	      /*close any already open lists of autocompleted values*/\r\n");
      out.write("	      closeAllLists();\r\n");
      out.write("	      if (!val) { return false;}\r\n");
      out.write("	      currentFocus = -1;\r\n");
      out.write("	      /*create a DIV element that will contain the items (values):*/\r\n");
      out.write("	      a = document.createElement(\"DIV\");\r\n");
      out.write("	      a.setAttribute(\"id\", this.id + \"autocomplete-list\");\r\n");
      out.write("	      a.setAttribute(\"class\", \"autocomplete-items\");\r\n");
      out.write("	      /*append the DIV element as a child of the autocomplete container:*/\r\n");
      out.write("	      this.parentNode.appendChild(a);\r\n");
      out.write("	      /*for each item in the array...*/\r\n");
      out.write("	      for (i = 0; i < arr.length; i++) {\r\n");
      out.write("	        /*check if the item starts with the same letters as the text field value:*/\r\n");
      out.write("	        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\r\n");
      out.write("	          /*create a DIV element for each matching element:*/\r\n");
      out.write("	          b = document.createElement(\"DIV\");\r\n");
      out.write("	          /*make the matching letters bold:*/\r\n");
      out.write("	          b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\r\n");
      out.write("	          b.innerHTML += arr[i].substr(val.length);\r\n");
      out.write("	          /*insert a input field that will hold the current array item's value:*/\r\n");
      out.write("	          b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\r\n");
      out.write("	          /*execute a function when someone clicks on the item value (DIV element):*/\r\n");
      out.write("	          b.addEventListener(\"click\", function(e) {\r\n");
      out.write("	              /*insert the value for the autocomplete text field:*/\r\n");
      out.write("	              inp.value = this.getElementsByTagName(\"input\")[0].value;\r\n");
      out.write("	              /*close the list of autocompleted values,\r\n");
      out.write("	              (or any other open lists of autocompleted values:*/\r\n");
      out.write("	              closeAllLists();\r\n");
      out.write("	          });\r\n");
      out.write("	          a.appendChild(b);\r\n");
      out.write("	        }\r\n");
      out.write("	      }\r\n");
      out.write("	  });\r\n");
      out.write("	  /*execute a function presses a key on the keyboard:*/\r\n");
      out.write("	  inp.addEventListener(\"keydown\", function(e) {\r\n");
      out.write("	      var x = document.getElementById(this.id + \"autocomplete-list\");\r\n");
      out.write("	      if (x) x = x.getElementsByTagName(\"div\");\r\n");
      out.write("	      if (e.keyCode == 40) {\r\n");
      out.write("	        /*If the arrow DOWN key is pressed,\r\n");
      out.write("	        increase the currentFocus variable:*/\r\n");
      out.write("	        currentFocus++;\r\n");
      out.write("	        /*and and make the current item more visible:*/\r\n");
      out.write("	        addActive(x);\r\n");
      out.write("	      } else if (e.keyCode == 38) { //up\r\n");
      out.write("	        /*If the arrow UP key is pressed,\r\n");
      out.write("	        decrease the currentFocus variable:*/\r\n");
      out.write("	        currentFocus--;\r\n");
      out.write("	        /*and and make the current item more visible:*/\r\n");
      out.write("	        addActive(x);\r\n");
      out.write("	      } else if (e.keyCode == 13) {\r\n");
      out.write("	        /*If the ENTER key is pressed, prevent the form from being submitted,*/\r\n");
      out.write("	        e.preventDefault();\r\n");
      out.write("	        if (currentFocus > -1) {\r\n");
      out.write("	          /*and simulate a click on the \"active\" item:*/\r\n");
      out.write("	          if (x) x[currentFocus].click();\r\n");
      out.write("	        }\r\n");
      out.write("	      }\r\n");
      out.write("	  });\r\n");
      out.write("	  function addActive(x) {\r\n");
      out.write("	    /*a function to classify an item as \"active\":*/\r\n");
      out.write("	    if (!x) return false;\r\n");
      out.write("	    /*start by removing the \"active\" class on all items:*/\r\n");
      out.write("	    removeActive(x);\r\n");
      out.write("	    if (currentFocus >= x.length) currentFocus = 0;\r\n");
      out.write("	    if (currentFocus < 0) currentFocus = (x.length - 1);\r\n");
      out.write("	    /*add class \"autocomplete-active\":*/\r\n");
      out.write("	    x[currentFocus].classList.add(\"autocomplete-active\");\r\n");
      out.write("	  }\r\n");
      out.write("	  function removeActive(x) {\r\n");
      out.write("	    /*a function to remove the \"active\" class from all autocomplete items:*/\r\n");
      out.write("	    for (var i = 0; i < x.length; i++) {\r\n");
      out.write("	      x[i].classList.remove(\"autocomplete-active\");\r\n");
      out.write("	    }\r\n");
      out.write("	  }\r\n");
      out.write("	  function closeAllLists(elmnt) {\r\n");
      out.write("	    /*close all autocomplete lists in the document,\r\n");
      out.write("	    except the one passed as an argument:*/\r\n");
      out.write("	    var x = document.getElementsByClassName(\"autocomplete-items\");\r\n");
      out.write("	    for (var i = 0; i < x.length; i++) {\r\n");
      out.write("	      if (elmnt != x[i] && elmnt != inp) {\r\n");
      out.write("	        x[i].parentNode.removeChild(x[i]);\r\n");
      out.write("	      }\r\n");
      out.write("	    }\r\n");
      out.write("	  }\r\n");
      out.write("	  /*execute a function when someone clicks in the document:*/\r\n");
      out.write("	  document.addEventListener(\"click\", function (e) {\r\n");
      out.write("	      closeAllLists(e.target);\r\n");
      out.write("	  });\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("   var jsArray = [");
      out.print( "\"" + String.join("\", \"", jspArray) + "\"" );
      out.write("];\r\n");
      out.write("   console.log(jsArray);\r\n");
      out.write("   autocomplete(document.getElementById(\"empid\"), jsArray);\r\n");
      out.write("</script>\r\n");
      out.write("	\r\n");
      out.write("    \r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
