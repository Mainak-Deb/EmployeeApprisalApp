package com.employee.DAO;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.employee.form.EmployeeForm;

public class EmployeeDAO {
	private String jdbcURL;
    private String jdbcUsername;
    private String jdbcPassword;
    private Connection jdbcConnection;

    public EmployeeDAO() {
        this.jdbcURL = "jdbc:mysql://localhost:3306/employee_master";
        this.jdbcUsername = "root";
        this.jdbcPassword = "root";
    }

    // Establishes a database connection
    protected void connect() throws SQLException {
        if (jdbcConnection == null || jdbcConnection.isClosed()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException e) {
                throw new SQLException(e);
            }
            jdbcConnection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
        }
    }

    // Closes the database connection
    protected void disconnect() throws SQLException {
        if (jdbcConnection != null && !jdbcConnection.isClosed()) {
            jdbcConnection.close();
        }
    }

	    
	public boolean authenticate(String username, String password,String role) throws SQLException {
	    	
	        String sql = "SELECT * FROM Employees WHERE Username = '"+username +"'";
	        connect();
	
	        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
	        
	        String real_password=null;
	        String job_role=null;
	        ResultSet resultSet = statement.executeQuery();
	        if (resultSet.next()) {
	            real_password = resultSet.getString("Password");
	            job_role = resultSet.getString("Role").toLowerCase();
	        }
	        
	        System.out.println(password+", "+ real_password);
	        System.out.println(job_role+", "+ role);
	        if((job_role.equals("user")) && role.equals("admin") ){
	        	return false;
	        }
	        if(password.equals(real_password)) {
	        	System.out.println(password+", "+ real_password);
	        	resultSet.close();
	            statement.close();
	            disconnect();
	        	return true;
	        }else {
	        	System.out.println("Error occured");
	        	resultSet.close();
	            statement.close();
	            disconnect();
	        	return false;
	        }
	    }
	
	public EmployeeForm getData(String eid) throws SQLException {

        EmployeeForm  emp = new EmployeeForm();
        String sql = "SELECT * FROM Employees WHERE EmpId = '"+eid+"'";
        connect();

        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
        	 String empID = resultSet.getString("EmpID");
             String name = resultSet.getString("Name");
             String postedDate = resultSet.getString("PostedDate");
             String level = resultSet.getString("Level");
             double ctc = resultSet.getDouble("CTC");
             String username = resultSet.getString("Username");
             String role = resultSet.getString("Role");
             String designation = resultSet.getString("Designation");
             emp.addEmployees(empID,name,postedDate,level,ctc,username,role,designation);
        }
        resultSet.close();
        statement.close();
        
        sql = "SELECT * FROM salaryDetails WHERE EmpId = '"+eid+"'";

        statement = jdbcConnection.prepareStatement(sql);
        resultSet = statement.executeQuery();
        if (resultSet.next()) {
            double basic = resultSet.getDouble("Basic");
            double specialAllowances = resultSet.getDouble("SpecialAllowances");
            double medical = resultSet.getDouble("Medical");
            int hra = resultSet.getInt("HRA");
            int pf = resultSet.getInt("PF");
            int food = resultSet.getInt("Food");
            int travel = resultSet.getInt("Travel");
            emp.addSalaryDetails(basic, specialAllowances, medical, hra, pf, food, travel);
        }
        resultSet.close();
        statement.close();
        
        
        disconnect();
        
        return emp;
   }
	    
}
