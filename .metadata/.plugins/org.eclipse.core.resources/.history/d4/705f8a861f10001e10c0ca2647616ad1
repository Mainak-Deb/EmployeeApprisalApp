package com.employee.DAO;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.employee.form.EmployeeForm;

public class EmployeeDAO {
	private String jdbcURL;
    private String jdbcUsername;
    private String jdbcPassword;
    private Connection jdbcConnection;

    public EmployeeDAO() {
        this.jdbcURL = "jdbc:mysql://localhost:3306/employee_master";
        this.jdbcUsername = "root";
        this.jdbcPassword = "root";
    }

    // Establishes a database connection
    protected void connect() throws SQLException {
        if (jdbcConnection == null || jdbcConnection.isClosed()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException e) {
                throw new SQLException(e);
            }
            jdbcConnection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
        }
    }

    // Closes the database connection
    protected void disconnect() throws SQLException {
        if (jdbcConnection != null && !jdbcConnection.isClosed()) {
            jdbcConnection.close();
        }
    }

	    
	public boolean authenticate(String username, String password,String role) throws SQLException {
	    	
	        String sql = "SELECT * FROM Employees WHERE Username = '"+username +"'";
	        connect();
	
	        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
	        
	        String real_password=null;
	        String job_role=null;
	        ResultSet resultSet = statement.executeQuery();
	        if (resultSet.next()) {
	            real_password = resultSet.getString("Password");
	            job_role = resultSet.getString("Role").toLowerCase();
	        }
	        
	        System.out.println(password+", "+ real_password);
	        System.out.println(job_role+", "+ role);
	        if((job_role.equals("user")) && role.equals("admin") ){
	        	return false;
	        }
	        if(password.equals(real_password)) {
	        	System.out.println(password+", "+ real_password);
	        	resultSet.close();
	            statement.close();
	            disconnect();
	        	return true;
	        }else {
	        	System.out.println("Error occured");
	        	resultSet.close();
	            statement.close();
	            disconnect();
	        	return false;
	        }
	    }
	
	public EmployeeForm getData(String eid) throws SQLException {

        EmployeeForm  emp = new EmployeeForm();
        String sql = "SELECT * FROM Employees WHERE EmpId = '"+eid+"'";
        connect();
        System.out.println("finding "+eid);

        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
        	 String empID = resultSet.getString("EmpID");
             String name = resultSet.getString("Name");
             String postedDate = resultSet.getString("PostedDate");
             String level = resultSet.getString("Level");
             double ctc = resultSet.getDouble("CTC");
             String username = resultSet.getString("Username");
             String role = resultSet.getString("Role");
             String designation = resultSet.getString("Designation");
             emp.addEmployees(empID,name,postedDate,level,ctc,username,role,designation);
        }
        resultSet.close();
        statement.close();
        
        sql = "SELECT * FROM salaryDetails WHERE EmpId = '"+eid+"'";

        statement = jdbcConnection.prepareStatement(sql);
        resultSet = statement.executeQuery();
        if (resultSet.next()) {
            double basic = resultSet.getDouble("Basic");
            double specialAllowances = resultSet.getDouble("SpecialAllowances");
            double medical = resultSet.getDouble("Medical");
            int hra = resultSet.getInt("HRA");
            int pf = resultSet.getInt("PF");
            int food = resultSet.getInt("Food");
            int travel = resultSet.getInt("Travel");
            emp.addSalaryDetails(basic, specialAllowances, medical, hra, pf, food, travel);
        }
        resultSet.close();
        statement.close();
        
        
        disconnect();
        
        return emp;
   }
	
	public String getEmployeeId(String username) throws SQLException {
        String empID =null;
        String sql = "SELECT EmpID FROM Employees WHERE Username = '"+username+"'";
        connect();
        System.out.println("finding "+username);

        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
        	  empID = resultSet.getString("EmpID");
        }
        resultSet.close();
        statement.close();
        disconnect();
        
        return  empID;
   }

	
	public boolean updateSalary(EmployeeForm emp) throws SQLException {
		String sql = "UPDATE SalaryDetails\r\n"
				+ "SET Basic = ?,\r\n"
				+ "    SpecialAllowances = ?,\r\n"
				+ "    Medical = ?,\r\n"
				+ "    HRA = ?,\r\n"
				+ "    PF = ?,\r\n"
				+ "    Food =?,\r\n"
				+ "    Travel = ?\r\n"
				+ "WHERE EmpID =?";
        connect();

        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
        
        statement.setDouble(1, emp.getBasic());
        statement.setDouble(2,emp.getSpecialAllowances());
        statement.setDouble(3, emp.getMedical());
        statement.setInt(4, emp.getHra());
        statement.setInt(5, emp.getPf());
        statement.setInt(6, emp.getFood());
        statement.setInt(7, emp.getTravel());
        statement.setString(8, emp.getEmpID());

        boolean rowInserted = statement.executeUpdate() > 0;
        statement.close();
        disconnect();
        
        this.updateCTC(emp);
        
        return rowInserted;
	}
	
	public boolean updateCTC(EmployeeForm emp) throws SQLException {
		String sql = "UPDATE Employees\r\n"
				+ "SET CTC = ?\r\n"
				+ "WHERE EmpID =?";
        connect();

        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
        
        double total=emp.getBasic()+emp.getMedical()+emp.getSpecialAllowances()+
        		(emp.getBasic()*emp.getPf()/100)+(emp.getBasic()*emp.getHra()/100);
        
        statement.setDouble(1, total);
        statement.setString(2, emp.getEmpID());
        boolean rowInserted = statement.executeUpdate() > 0;
        statement.close();
        disconnect();
        return rowInserted;
	}
	
	
	public boolean updateLevel(EmployeeForm emp) throws SQLException {
		String sql = "UPDATE Employees\r\n"
				+ "SET Level = ?,\r\n"
				+ "    CTC = ?,\r\n"
				+ "    Designation= ?\r\n"
				+ "WHERE EmpID =?";
		
		
		EmployeeForm prevemp=this.getData(emp.getEmpID());
		
		this.updateSalaryStructure(prevemp,prevemp.getCtc(), emp.getCtc());
		
        connect();

        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
        
        statement.setString(1, emp.getLevel());
        statement.setDouble(2,emp.getCtc());
        statement.setString(3, emp.getDesignation());
        statement.setString(4, emp.getEmpID());
        
        

        boolean rowInserted = statement.executeUpdate() > 0;
        statement.close();
        disconnect();
        return rowInserted;
	}
	
	public boolean updateSalaryStructure(EmployeeForm emp, double previousSalary, double currentSalary) throws SQLException {
		String sql = "UPDATE SalaryDetails\r\n"
				+ "SET Basic = ?,\r\n"
				+ "    SpecialAllowances = ?,\r\n"
				+ "    Medical = ?\r\n"
				+ "WHERE EmpID =?";
		
		
		double incr=currentSalary/previousSalary;
        connect();

        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
        
        statement.setDouble(1, emp.getBasic()*incr);
        statement.setDouble(2,emp.getSpecialAllowances()*incr);
        statement.setDouble(3, emp.getMedical()*incr);
        statement.setString(4, emp.getEmpID());

        boolean rowInserted = statement.executeUpdate() > 0;
        statement.close();
        disconnect();

        return rowInserted;
	}
	
	public ArrayList<String> getAllId(){
		List<String> ids = new ArrayList<String>();
        String sql = "SELECT * FROM student_details";
        PreparedStatement statement = jdbcConnection.prepareStatement(sql);
        

        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
        	int empid= resultSet.getInt("EmpID");
            ids.add(empid);
        }
        resultSet.close();
        statement.close();
        disconnect();
        return ids;
	}
	
	
	
}
